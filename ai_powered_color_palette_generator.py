# -*- coding: utf-8 -*-
"""AI-Powered-Color-Palette-Generator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1odYuRKmUrziAZc5jW6SGepchqSfvVI9P
"""

!git init

# Set up Git config
!git config --global user.name "riasrivast"
!git config --global user.email "riasrivast03@gmail.com"

!git add .

!git status

!pip install pandas numpy matplotlib seaborn tensorflow

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from keras.models import Sequential
from keras.layers import Dense

# Load the dataset
df = pd.read_json("https://huggingface.co/datasets/huggingface-projects/color-palettes-sd/resolve/main/data.json")

# Function to extract colors from the dataset
def extract_colors(row):
    colors = []
    # Iterate through images in each row and extract color palettes
    for image in row['data']['images']:
        colors.extend(image['colors'])  # Add all colors from each image
    return colors

# Apply the function to extract color palettes
df['colors'] = df.apply(extract_colors, axis=1)

# Now, we have a 'colors' column that contains color palettes
df.head()  # Check the first few rows of the dataset

# Function to convert HEX to normalized RGB
def hex_to_rgb(color):
    color = color.lstrip('#')
    return [int(color[i:i+2], 16) / 255.0 for i in (0, 2, 4)]

# Convert the HEX colors to RGB for each palette
df['rgb_colors'] = df['colors'].apply(lambda palette: [hex_to_rgb(c) for c in palette])

# Pad or trim each palette to exactly 5 colors (each with 3 RGB values)
def pad_palette(palette, target_length=5):
    # Pad with black [0, 0, 0] if fewer than 5 colors
    while len(palette) < target_length:
        palette.append([0.0, 0.0, 0.0])
    return palette[:target_length]

df['rgb_colors'] = df['rgb_colors'].apply(pad_palette)

# Flatten each palette (5 colors * 3 RGB values = 15 features)
X = np.array(df['rgb_colors'].apply(lambda colors: [val for rgb in colors for val in rgb]).tolist())

# Confirm shape: should be (num_samples, 15)
print("Data shape:", X.shape)

# Define a simple feedforward neural network
model = Sequential()
model.add(Dense(64, activation='relu', input_shape=(15,)))
model.add(Dense(128, activation='relu'))
model.add(Dense(15, activation='sigmoid'))  # 15 values for 5 RGB colors

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model and store training history
history = model.fit(X, X, epochs=50, batch_size=32, validation_split=0.2)

import matplotlib.pyplot as plt

plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.title('Model Training Loss')
plt.show()
model.summary()

# Generate a few random latent vectors
num_palettes = 5
random_inputs = np.random.rand(num_palettes, 15)

# Use the model to generate new color palettes
generated_palettes = model.predict(random_inputs)

# Reshape and display the generated palettes
def show_palettes(palettes):
    fig, axs = plt.subplots(len(palettes), 1, figsize=(10, 2 * len(palettes)))

    for i, palette in enumerate(palettes):
        # Reshape to 5 colors, each with 3 RGB values
        colors = np.reshape(palette, (5, 3))
        axs[i].imshow([colors], aspect='auto')
        axs[i].axis('off')

    plt.tight_layout()
    plt.show()

# Show generated palettes
show_palettes(generated_palettes)

# Compare real and generated palettes side-by-side
real_palettes = X[:5]
show_palettes(real_palettes)
show_palettes(generated_palettes)

def rgb_to_hex(rgb):
    return '#' + ''.join(f'{int(val * 255):02x}' for val in rgb)

for i, palette in enumerate(generated_palettes):
    print(f"Palette {i + 1}:")
    for color in np.reshape(palette, (5, 3)):
        print(rgb_to_hex(color))
    print()

!pip install -q sentence-transformers

import pandas as pd
import numpy as np
from sentence_transformers import SentenceTransformer
from keras.models import Sequential
from keras.layers import Dense
import matplotlib.pyplot as plt

df = pd.read_json("https://huggingface.co/datasets/huggingface-projects/color-palettes-sd/resolve/main/data.json")

# Extract prompt and all colors from each row
def extract_colors_and_prompt(row):
    all_colors = []
    for image in row['data']['images']:
        all_colors.extend(image['colors'])  # each color is a hex string
    return pd.Series([row['data']['prompt'], all_colors])

df[['prompt', 'colors']] = df.apply(extract_colors_and_prompt, axis=1)

# Convert hex colors to normalized RGB
def hex_to_rgb(hex_color):
    h = hex_color.lstrip("#")
    return [int(h[i:i+2], 16) / 255.0 for i in (0, 2, 4)]

df['rgb_colors'] = df['colors'].apply(lambda x: [hex_to_rgb(c) for c in x])

# Filter to exactly 5 colors per prompt (optional but keeps shape clean)
df = df[df['rgb_colors'].apply(lambda x: len(x) == 5)]

model_embedder = SentenceTransformer('all-MiniLM-L6-v2')

# Convert prompts to embeddings (384-dim vectors)
prompt_embeddings = model_embedder.encode(df['prompt'].tolist())

# Flatten the 5 RGB colors into 15 numbers
color_targets = np.array([np.array(c).flatten() for c in df['rgb_colors']])

# Build the model with the correct input shape
model = Sequential()
model.add(Dense(128, activation='relu', input_shape=(prompt_embeddings.shape[1],)))  # Input: 384
model.add(Dense(256, activation='relu'))
model.add(Dense(15, activation='sigmoid'))  # Output: 5 RGB colors Ã— 3

model.compile(optimizer='adam', loss='mean_squared_error')
# Train the model and capture the training history
history = model.fit(prompt_embeddings, color_targets, epochs=50, batch_size=32)

import matplotlib.pyplot as plt

plt.plot(history.history['loss'], label='Training Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.title('Model Training Loss')
plt.show()
model.summary()

def generate_palette(prompt):
    # Convert the prompt to an embedding using the SentenceTransformer model
    vec = model_embedder.encode([prompt])  # (1, 384)

    # Predict the color palette using the trained model
    pred = model.predict(vec)[0]  # Output shape: (15,)

    # Reshape the output into 5 RGB colors
    colors = np.reshape(pred, (5, 3))

    return colors


def show_palette(palette):
    fig, ax = plt.subplots(figsize=(6, 1))
    ax.imshow([palette], aspect='auto')
    ax.axis('off')
    plt.show()

palette = generate_palette("a rainy night in Tokyo")
show_palette(palette)

palette = generate_palette("a sunny day in New York City")
show_palette(palette)

palette = generate_palette("In a green rainforest")
show_palette(palette)

palette = generate_palette("Peaceful and calm")
show_palette(palette)

palette = generate_palette("A carnival at dusk")
show_palette(palette)